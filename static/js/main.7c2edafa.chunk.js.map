{"version":3,"sources":["powergrid/Grid.tsx","selector-master/actions.ts","powergrid/Datasource.ts","powergrid/GridReactive.tsx","powergrid/extensions/extensions.ts","powergrid/helpers.ts","selector-master/providers.ts","selector-master/FormModel.ts","dataActions.ts","selector-master/selectors.ts","selector-master/binders/TextBinder.tsx","selector-master/binders/SelectBinder.tsx","selector-master/FormField.tsx","SuperForm.tsx","selector-master/reducers.ts","data.ts","store.ts","dataReducers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","ActionType","memo","props","elRef","useRef","useLayoutEffect","el","current","gridOpts","Object","assign","settingsId","rootId","opts","grid","$","PowerGrid","events","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","event","value","target","on","name","action","err","return","onGridMounted","react_default","a","createElement","id","style","className","ref","Datasource","data","classCallCheck","this","lookupById","handleValueChanged","computeLookupById","createClass","key","callback","oldData","trigger","length","start","end","slice","getRecordById","index","get","isReady","result","Map","i","n","set","GridReactive","gridId","extensions","onValueChanged","onSelectionChanged","initialStateRef","_getInitialState","initialState","extsContext","onRowSelected","pgExtensions","ctx","pgExts","selection","onrowselected","addSelectionExt","editing","createExtensions","dataSource","getInitialState","useEffect","updateData","allOpts","objectSpread","powergrid_Grid","dataToRows","idFn","columns","rows","_loop","item","row","map","column","_key","push","createProvidersSelector","providers","prevValues","prevFormValues","providerKeys","keys","seen","Set","depKeys","_i","k","provider","dependsOn","some","depKey","Function","has","add","Error","getProviderKeysOrdered","deps","storeState","formValues","arguments","Imm","values","changed","depsValues","Array","depsChanged","depValue","hasOwnProperty","apply","concat","toConsumableArray","InnerComponent","_ref","formModel","children","connect","state","_ref2","formId","selectState","selectProvided","form","getFormValues","providedValues","setFormValue","type","SET_FORM_VALUE","resetAllFormValues","RESET_ALL_FORM_VALUES","propValues","valuesMerged","useMemo","actions","setValue","bind","resetAllValues","TextBinder","disabled","onChanged","Form","Control","onChange","e","SelectBinder","options","selectedIdx","findIndex","opt","as","label","FormField","Group","Label","salesOrderColumns","width","title","forecastColumns","editable","products","s","productNo","no","productDescription","product","find","x","description","salesOrders","f","selectedId","data2","changedQuantities","forecasts","changedQuantity","totalQuantity","reduce","acc","d","parseFloat","dispatch","FormModel","p","Container","Button","onClick","v","quantity","SET_CHANGED_QUANTITY","setChangedQuantity","createState","Record","forms","createForm","updateForm","fn","update","1","date","remark","2","3","b","c","g","h","store","createStore","combineReducers","handleSetFormValue","delete","handlerResetAllFormValues","RESET_FORM_VALUES","_ref3","withMutations","vs","handleResetFormValeus","handleSetChangedQuantity","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","src_SuperForm","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c2edafa.chunk.js","sourcesContent":["import React, { CSSProperties, useRef, useLayoutEffect } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport { EventHandler, PowergridOpts } from './types';\r\n\r\nexport type Props = {\r\n    rootId: string,\r\n    className?: string,\r\n    style?: CSSProperties,\r\n    events?: EventHandler[],\r\n    onGridMounted?: (grid: any) => void,\r\n    opts: PowergridOpts\r\n}\r\n\r\nfunction propsAreEqual() {\r\n    // this component should never re-render\r\n    return true;\r\n}\r\n\r\nexport default React.memo(\r\n    function Grid(props: Props) {\r\n        const elRef = useRef<HTMLDivElement>(null);\r\n        useLayoutEffect(() => {\r\n            const el = elRef.current;\r\n            if (el == null) return;\r\n\r\n            // mount the Powergrid\r\n            const gridOpts = Object.assign({ settingsId: props.rootId }, props.opts);\r\n            const grid = ($(el) as any).PowerGrid(gridOpts);\r\n\r\n            // attach event listeners\r\n            const events = props.events;\r\n            if (events) {\r\n                for (let event of events) {\r\n                    grid.target.on(event.name, event.action);\r\n                }\r\n            }\r\n\r\n            // supply the newly created grid to the call-back\r\n            if (props.onGridMounted)\r\n                props.onGridMounted(grid);\r\n        }, []);\r\n\r\n        return <div id={props.rootId} style={props.style} className={props.className} ref={elRef}/>\r\n    },\r\n    propsAreEqual\r\n);\r\n\r\n","import { Action } from \"redux\";\r\n\r\nexport enum ActionType {\r\n    SET_FORM_VALUE = \"core.form.SET_FORM_VALUE\",\r\n    RESET_ALL_FORM_VALUES = \"core.form.RESET_ALL_FORM_VALUES\",\r\n    RESET_FORM_VALUES = \"core.form.RESET_FORM_VALUES\"\r\n}\r\n\r\nexport function setFormValue(formId: string, key: string, value: any): SetFormValueAction {\r\n    return {\r\n        type: ActionType.SET_FORM_VALUE,\r\n        formId,\r\n        key: key as string,\r\n        value\r\n    };\r\n}\r\n\r\nexport function resetAllFormValues(formId: string): ResetAllFormValuesAction {\r\n    return {\r\n        type: ActionType.RESET_ALL_FORM_VALUES,\r\n        formId\r\n    };\r\n}\r\n\r\nexport function resetFormValues(formId: string, keys: string[]): ResetFormValuesAction {\r\n    return {\r\n        type: ActionType.RESET_FORM_VALUES,\r\n        formId, keys\r\n    };\r\n}\r\n\r\nexport interface SetFormValueAction extends Action {\r\n    formId: string,\r\n    key: string,\r\n    value: any\r\n}\r\n\r\nexport interface ResetAllFormValuesAction extends Action {\r\n    formId: string\r\n}\r\n\r\nexport interface ResetFormValuesAction extends Action {\r\n    formId: string,\r\n    keys: string[]\r\n}\r\n","import $ from 'jquery';\r\nimport { Row, IDatasource } from './types';\r\n\r\nexport type DataChangedFn = (id: string, key: number, value: any) => void;\r\n\r\nexport class Datasource implements IDatasource {\r\n    private data: Row[];\r\n    private lookupById: Map<string, number>;\r\n\r\n    private handleValueChanged: DataChangedFn|undefined;\r\n\r\n    constructor(data: Row[]) {\r\n        this.data = data;\r\n        this.lookupById = this.computeLookupById(data);\r\n    }\r\n\r\n    onValueChanged(callback: DataChangedFn|undefined): void {\r\n        this.handleValueChanged = callback;\r\n    }\r\n\r\n    updateData(data: Row[]) {\r\n        const oldData = this.data;\r\n        this.data = data;\r\n        this.lookupById = this.computeLookupById(data);\r\n\r\n        $(this).trigger('datachanged', {\r\n            data,\r\n            oldData\r\n        });\r\n    }\r\n\r\n    recordCount() {\r\n        return this.data.length;\r\n    }\r\n\r\n    getData(start: number, end: number): Row[] {\r\n        return this.data.slice(start, end);\r\n    }\r\n\r\n    setValue(id: string, key: number, value: any) {\r\n        const record = this.getRecordById(id);\r\n        record[key] = value;\r\n\r\n        this.handleValueChanged && this.handleValueChanged(id, key, value);\r\n    }\r\n\r\n    getRecordById(id: string): Row {\r\n        const index = this.lookupById.get(id)!;\r\n        return this.data[index];\r\n    }\r\n\r\n    isReady() {\r\n        return true;\r\n    }\r\n\r\n    assertReady() {\r\n        if(!this.isReady()) {\r\n            throw 'Datasource not ready yet';\r\n        }\r\n    }\r\n\r\n    private computeLookupById(data: Row[]) {\r\n        const result = new Map<string, number>();\r\n        for (let i = 0, n = data.length; i < n; ++i) {\r\n            result.set(data[i].id, i);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\n\r\nimport Grid from './Grid';\r\nimport { PowergridOpts, Row } from './types';\r\nimport { Datasource } from './Datasource';\r\nimport { createExtensions, ExtensionOpts, ExtsContext, OnSelectionChangedFn, PgExts } from './extensions/extensions';\r\n\r\n/**\r\n * Wrapper around the powergrid component.\r\n * Creates a datasource and initializes the extensions.\r\n */\r\n\r\ntype Opts = Pick<PowergridOpts, Exclude<keyof PowergridOpts, 'dataSource' | 'extensions' | 'data' | 'rootId'>>;\r\n\r\nexport type OnValueChangedFn = (id: string, key: number, value: string) => void;\r\n\r\ntype Props = {\r\n    gridId: string,\r\n    data: Row[],\r\n    extensions: ExtensionOpts,\r\n    opts: Opts,\r\n    onValueChanged?: OnValueChangedFn,\r\n    onSelectionChanged?: OnSelectionChangedFn\r\n}\r\n\r\ntype InitialState = {\r\n    extsContext: ExtsContext,\r\n    pgExtensions: PgExts,\r\n    dataSource: Datasource\r\n}\r\n\r\nexport default function GridReactive(props: Props) {\r\n    const { gridId, extensions, opts, data, onValueChanged, onSelectionChanged } = props;\r\n\r\n    // use useRef instead of useMemo, because we require a guarantee that the\r\n    // initial-state will never be re-created. UseMemo is an \"optimization\" and might not offer that guarantee in the future.\r\n    const initialStateRef = useRef<InitialState|null>(null);\r\n    function getInitialState(): InitialState {\r\n        let initialState = initialStateRef.current;\r\n        if (initialState != null) return initialState;\r\n\r\n        // create the extensions context object\r\n        const extsContext: ExtsContext = {\r\n            onRowSelected: onSelectionChanged\r\n        };\r\n\r\n        // create powergrid extensions\r\n        const pgExtensions = createExtensions(extensions, extsContext);\r\n\r\n        // create powergrid datasource\r\n        const dataSource = new Datasource(data);\r\n\r\n        // create the initial state\r\n        initialState = {\r\n            extsContext,\r\n            pgExtensions,\r\n            dataSource\r\n        };\r\n\r\n        initialStateRef.current = initialState;\r\n        return initialState;\r\n    }\r\n\r\n    const { dataSource, extsContext, pgExtensions } = getInitialState();\r\n    \r\n    // update the datasource when the data changed\r\n    useEffect(() => {\r\n        dataSource.updateData(data);\r\n    }, [data]);\r\n\r\n    // update the datasource onValueChanged callback\r\n    useEffect(() => {\r\n        dataSource.onValueChanged(onValueChanged);\r\n    }, [onValueChanged]);\r\n\r\n    // update the callbacks in the extensions context\r\n    useEffect(() => {\r\n        extsContext.onRowSelected = onSelectionChanged;\r\n    }, [onSelectionChanged]);\r\n\r\n    const rootId = gridId;\r\n    const allOpts: PowergridOpts = { ...opts, rootId, dataSource, extensions: pgExtensions };\r\n    return <Grid rootId={gridId} opts={allOpts}/>\r\n}\r\n","export type OnSelectionChangedFn = (id: string) => void;\r\n\r\nexport type PgExts = { [key: string]: any };\r\n\r\nexport interface ExtensionOpts {\r\n    selection?: boolean,\r\n    editing?: boolean\r\n}\r\n\r\nexport interface ExtsContext {\r\n    onRowSelected?: OnSelectionChangedFn\r\n}\r\n\r\nfunction addSelectionExt(result: PgExts, ctx: ExtsContext) {\r\n    result.selection = {\r\n        onrowselected: function(grid: any, id: string|number) {\r\n            ctx.onRowSelected && ctx.onRowSelected('' + id);\r\n        }\r\n    }\r\n}\r\n\r\nfunction addEditingExt(result: PgExts) {\r\n    result.editing = true;\r\n}\r\n\r\nexport function createExtensions(opts: ExtensionOpts, ctx: ExtsContext): PgExts {\r\n    const pgExts: PgExts = {};\r\n\r\n    if (opts.selection)\r\n        addSelectionExt(pgExts, ctx);\r\n\r\n    if (opts.editing)\r\n        addEditingExt(pgExts);\r\n\r\n    return pgExts;\r\n}\r\n","import { Column, Row } from \"./types\";\r\n\r\nexport function dataToRows<T>(data: Iterable<T>, idFn: (item: T, index: number) => string, columns: Column[]): Row[] {\r\n    const rows: Row[] = [];\r\n\r\n    let i = 0;\r\n    for (let item of data) {\r\n        const row: Row = columns.map((column) => (item as any)[column._key]) as any;\r\n        row.id = idFn(item, i++);\r\n        rows.push(row);\r\n    }\r\n\r\n    return rows;\r\n}\r\n\r\n\r\n","import * as Imm from \"immutable\";\r\n\r\n/** types */\r\n\r\nexport type ProviderValueFn<S, T> = (state: S, ...args: any[]) => T;\r\nexport type DependencyFn<S> = ((state: S) => any) | string;\r\n\r\nexport interface ProviderConfig<S, T> {\r\n    value: T|ProviderValueFn<S, T>,\r\n    dependsOn?: DependencyFn<S>[]\r\n}\r\n\r\nexport type Provider<S, T> = ProviderValueFn<S, T> | ProviderConfig<S, T>\r\n\r\nexport type Providers<S, V> = {\r\n    [K in keyof V]: Provider<S, V[K]>\r\n}\r\n\r\nexport type ValuesSelector<S, V> = (state: S) => Partial<V>;\r\n\r\n/** end types */\r\n\r\nexport function createProvidersSelector<State, Values>(providers: Providers<State, Values>) {\r\n    const providerKeys = getProviderKeysOrdered(providers);\r\n\r\n    const deps = new Map<keyof Values, any[]>();\r\n    \r\n    let prevValues: Values|undefined;\r\n    let prevFormValues: Imm.Map<keyof Values, any>|undefined;\r\n    \r\n    return (storeState: State, formValues: Imm.Map<keyof Values, any> = Imm.Map()) => {\r\n        const values: Partial<Values> = {};\r\n        \r\n        let changed = prevValues == null;\r\n\r\n        for (let key of providerKeys) {\r\n            if (formValues.has(key) && (prevFormValues == null || !prevFormValues.has(key) || formValues.get(key) !== prevFormValues.get(key))) {\r\n                values[key] = formValues.get(key);\r\n                changed = true;\r\n\r\n            } else {\r\n                const provider: Provider<State, any> = providers[key];\r\n                if (provider instanceof Function) {\r\n                    values[key] = provider(storeState);\r\n        \r\n                } else {\r\n                    const depKeys = provider.dependsOn;\r\n                    if (depKeys) {\r\n                        const n = depKeys.length;\r\n\r\n                        let depsValues = deps.get(key);\r\n                        if (depsValues == null) {\r\n                            depsValues = new Array<any>(n);\r\n                            deps.set(key, depsValues);\r\n                        }\r\n                        \r\n                        let depsChanged = prevValues == null;\r\n        \r\n                        for (let i = 0; i < n; ++i) {\r\n                            const depKey = depKeys[i];\r\n\r\n                            let depValue;\r\n                            if (depKey instanceof Function) {\r\n                                depValue = depKey(storeState);\r\n                            } else {\r\n                                depValue = values[depKey as keyof Values];\r\n                            }\r\n        \r\n                            if (!depsValues.hasOwnProperty(i) || depsValues[i] !== depValue) {\r\n                                depsValues[i] = depValue;\r\n                                depsChanged = true;\r\n                            }\r\n                        }\r\n        \r\n                        if (prevValues == null || depsChanged) {\r\n                            values[key] = provider.value(storeState, ...depsValues);\r\n                        } else {\r\n                            values[key] = prevValues[key]\r\n                        }\r\n        \r\n                    } else {\r\n                        values[key] = provider.value(storeState);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (prevValues == null || values[key] !== prevValues[key]) {\r\n                changed = true;\r\n            }\r\n        }\r\n    \r\n        prevFormValues = formValues;\r\n\r\n        if (changed) {\r\n            prevValues = values as Values;\r\n            return prevValues;\r\n    \r\n        } else {\r\n            return prevValues!;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the keys of the providers, ordered by dependencies\r\n * @param providers \r\n */\r\nfunction getProviderKeysOrdered<S, V>(providers: Providers<S, V>): (keyof V)[] {\r\n    let keys = Object.keys(providers) as (keyof V)[];\r\n    const result: (keyof V)[] = [];\r\n    const seen = new Set<keyof V>();\r\n\r\n    while (keys.length) {\r\n        let depKeys: (keyof V)[] | undefined;\r\n        \r\n        for (let k of keys) {\r\n            const provider: Provider<S, any> = providers[k as keyof V];\r\n\r\n            if (typeof provider === 'object'\r\n                && provider.dependsOn\r\n                && provider.dependsOn.some((depKey) => !(depKey instanceof Function) && !seen.has(depKey as keyof V))) {\r\n\r\n                if (!depKeys)\r\n                    depKeys = [];\r\n\r\n                // provider has unresolved dependencies. Delay until later\r\n                depKeys.push(k);\r\n                continue;\r\n            }\r\n\r\n            result.push(k);\r\n            seen.add(k);\r\n        }\r\n\r\n        if (depKeys) {\r\n            if (depKeys.length === keys.length) {\r\n                throw new Error('cyclic dependency! Couldn\\'t resolve keys: - ' + depKeys);\r\n            } else {\r\n                keys = depKeys;\r\n            }\r\n\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","import React, { ReactElement, useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FormModel, FormActions, FormsState } from './types';\r\nimport { setFormValue, resetAllFormValues } from './actions';\r\nimport { Providers, createProvidersSelector } from './providers';\r\nimport { Map } from 'immutable';\r\nimport { getFormValues } from './selectors';\r\n\r\ntype RenderChildrenFn<V> = (formModel: FormModel<V>) => ReactElement;\r\n\r\ntype OwnProps<Provided = {}, Values = {}, State = any> = {\r\n    formId: string,\r\n    selectState: (s: State) => FormsState,\r\n    providers: Providers<State, Provided>,\r\n    values?: Values,\r\n    children: RenderChildrenFn<Provided & Values>\r\n};\r\n\r\ntype DispatchProps = {\r\n    setFormValue: typeof setFormValue,\r\n    resetAllFormValues: typeof resetAllFormValues\r\n};\r\n\r\ntype StateProps<Provided> = {\r\n    providedValues: Provided\r\n};\r\n\r\ntype InnerProps = {\r\n    formModel: FormModel<any>,\r\n    children: RenderChildrenFn<any>\r\n}\r\n\r\n// Memoized inner component. Only call render function when the props changed\r\nconst InnerComponent = React.memo(\r\n    function FormModelInner({ formModel, children }: InnerProps) {\r\n        return children(formModel);\r\n    }\r\n);\r\n\r\nfunction FormModelComponent<Provided, Values, State>(props: StateProps<Provided> & DispatchProps & OwnProps<Provided, Values, State>) {\r\n    const {\r\n        children, formId, values: propValues,\r\n        resetAllFormValues, setFormValue, providedValues\r\n    } = props;\r\n\r\n    // merge the provided values with the values passed in props\r\n    const valuesMerged = useMemo(() => Object.assign({}, propValues, providedValues), [propValues, providedValues]);\r\n\r\n    // build the form-actions\r\n    const actions = useMemo<FormActions<Provided & Values>>(() => ({\r\n        setValue: setFormValue.bind(null, formId) as any,\r\n        resetAllValues: resetAllFormValues.bind(null, formId)\r\n    }), [formId, valuesMerged, setFormValue, resetAllFormValues]);\r\n\r\n    // build the form-model\r\n    const formModel = useMemo<FormModel<Provided & Values>>(() => ({\r\n        formId,\r\n        values: valuesMerged,\r\n        actions\r\n    }), [formId, valuesMerged, actions]);\r\n\r\n    // render the inner component\r\n    return React.createElement(InnerComponent, { children, formModel });\r\n}\r\n\r\nexport default connect(\r\n    <Provided, Values, State>(state: State, { formId, providers, selectState }: OwnProps<Provided, Values, State>) => {\r\n        const selectProvided = createProvidersSelector(providers);\r\n        return (state: State): StateProps<Provided> => {\r\n            const formsState = selectState(state);\r\n            const formValues = getFormValues(formsState, formId) as Map<keyof Provided, any>;\r\n            return {\r\n                providedValues: selectProvided(state, formValues)\r\n            }\r\n\r\n        }\r\n    },\r\n    { setFormValue, resetAllFormValues }\r\n)(FormModelComponent) as any as <TProvided, TValues, TState>(props: OwnProps<TProvided, TValues, TState>) => React.ReactElement;\r\n","import { Action } from \"redux\";\r\n\r\nexport enum ActionType {\r\n    SET_CHANGED_QUANTITY = 'example.SET_CHANGED_QUANTITY'\r\n}\r\n\r\nexport function setChangedQuantity(id: string, quantity: number): SetChangedQuantityAction {\r\n    return {\r\n        type: ActionType.SET_CHANGED_QUANTITY, id, quantity\r\n    };\r\n}\r\n\r\nexport interface SetChangedQuantityAction extends Action<ActionType> {\r\n    id: string,\r\n    quantity: number\r\n};\r\n","import { Map } from \"immutable\";\r\nimport { FormsState } from \"./types\";\r\n\r\nexport function getFormValues(state: FormsState, formId: string): Map<string, any> {\r\n    const form = state.get('forms').get(formId);\r\n    return form ? form.get('values') : Map();\r\n}\r\n\r\nexport function getFormValuePair(state: FormsState, formId: string, key: string) {\r\n    const form = state.get('forms').get(formId);\r\n    return form && form.get('values').get(key);\r\n}\r\n\r\nexport function getFormValue<T>(state: FormsState, formId: string, key: string): T|undefined {\r\n    const pair = getFormValuePair(state, formId, key);\r\n    return pair && pair.get('value');\r\n}\r\n","import React from 'react';\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport { BinderProps } from \"../types\";\r\n\r\nexport default function TextBinder(props: BinderProps<string>) {\r\n    const disabled = !props.onChanged;\r\n\r\n    function handleChanged(e: any) {\r\n        if (props.onChanged)\r\n            props.onChanged(e.target.value);\r\n    }\r\n\r\n    return <Form.Control \r\n        type=\"text\"\r\n        value={props.value}\r\n        disabled={disabled}\r\n        onChange={handleChanged}/>\r\n}\r\n","import React from 'react';\r\nimport { Form } from \"react-bootstrap\";\r\nimport { BinderProps } from '../types';\r\n\r\nexport interface Option<T> {\r\n    label: string, value: T\r\n}\r\n\r\nexport interface SelectBinderProps<T> extends BinderProps<T> {\r\n    options: Option<T>[]\r\n};\r\n\r\nexport default function SelectBinder<T>(props: SelectBinderProps<T>) {\r\n    const options = props.options;\r\n    const selectedIdx = options.findIndex((opt) => opt.value === props.value);\r\n    const disabled = !props.onChanged;\r\n\r\n    function handleChanged(e: any) {\r\n        if (props.onChanged)\r\n            props.onChanged(options[e.target.value].value);\r\n    }\r\n\r\n    return <Form.Control as=\"select\"\r\n        value={'' + selectedIdx}\r\n        disabled={disabled}\r\n        onChange={handleChanged}>\r\n        { options.map((opt, index) => <option key={index} value={'' + index}>{ opt.label }</option>) }\r\n    </Form.Control>\r\n}\r\n","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\ninterface Props {\r\n    label: string\r\n    children: React.ReactElement\r\n};\r\n\r\nexport default function FormField({ label, children }: Props) {\r\n    return <Form.Group>\r\n        <Form.Label>\r\n            { label }\r\n        </Form.Label>\r\n        { children }\r\n    </Form.Group>\r\n}\r\n\r\n","import React, { useMemo } from 'react';\r\nimport { Map } from 'immutable';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Button } from 'react-bootstrap';\r\n\r\nimport { StoreState as S, Product } from './types';\r\n\r\nimport { Column, Row } from './powergrid/types';\r\nimport GridReactive from './powergrid/GridReactive';\r\nimport { dataToRows } from './powergrid/helpers';\r\n\r\nimport FormModel from './selector-master/FormModel';\r\nimport TextBinder from './selector-master/binders/TextBinder';\r\nimport SelectBinder from './selector-master/binders/SelectBinder';\r\nimport FormField from './selector-master/FormField';\r\n\r\nimport { setChangedQuantity } from './dataActions';\r\nimport { Providers } from './selector-master/providers';\r\n\r\ninterface Values {\r\n    products: Product[],\r\n    productNo: string,\r\n    productDescription: string,\r\n    data: Row[],\r\n    data2: Row[]\r\n    selectedId: string,\r\n    totalQuantity: number\r\n}\r\n\r\nconst salesOrderColumns: Column[] = [\r\n    { _key: 'id', width: 160, title: 'Id' },\r\n    { _key: 'quantity', width: 150, title: 'Quantity' },\r\n    { _key: 'date', width: 150, title: 'Date' },\r\n    { _key: 'remark', width: 150, title: 'Remark' }\r\n]\r\n\r\nconst forecastColumns: Column[] = [\r\n    { _key: 'id', width: 160, title: 'Id' },\r\n    { _key: 'quantity', width: 150, title: 'Quantity', editable: true }\r\n]\r\n\r\nconst providers: Providers<S, Values> = {\r\n    products: (s: S) => s.data.products,\r\n    productNo: {\r\n        value: (s: S, products: Product[]) => products[0].no,\r\n        dependsOn: ['products']\r\n    },\r\n    productDescription: {\r\n        value: (s: S, productNo: string, products: Product[]) => {\r\n            const product = products.find((x) => x.no === productNo);\r\n            return product ? product.description : '';\r\n        },\r\n        dependsOn: ['productNo', 'products']\r\n    },\r\n    data: {\r\n        value: (s: S, productNo: string) => dataToRows(s.data.salesOrders[productNo], (f) => f.id, salesOrderColumns),\r\n        dependsOn: ['productNo']\r\n    },\r\n    selectedId: {\r\n        value: () => '',\r\n        dependsOn: ['data']\r\n    },\r\n    data2: {\r\n        value: (s: S, selectedId: string, changedQuantities: Map<string, number>) => {\r\n            const rows =  selectedId && s.data.forecasts[selectedId] ? dataToRows(s.data.forecasts[selectedId], (f) => f.id, forecastColumns) : [];\r\n\r\n            // merge rows with changed quantities.\r\n            // Maybe we want to build this into the grid component somehow - But for now it's a manual step.\r\n            for (let row of rows) {\r\n                const changedQuantity = changedQuantities.get(row[0]);\r\n                if (changedQuantity != null)\r\n                    row[1] = changedQuantity;\r\n            }\r\n\r\n            return rows;\r\n        },\r\n        dependsOn: ['selectedId', (s: S) => s.data.changedQuantities]\r\n    },\r\n    totalQuantity: {\r\n        value: (s: S, data: Row[]) => data.reduce((acc, d) => acc + parseFloat(d[1]), 0),\r\n        dependsOn: ['data2']\r\n    }\r\n}\r\n\r\ntype FormProps = {\r\n    dispatch: Dispatch\r\n}\r\n\r\nfunction SuperForm({ dispatch }: FormProps) {\r\n    return <FormModel\r\n        formId=\"form-1\"\r\n        providers={providers}\r\n        selectState={(s: S) => s.form}>\r\n        {({ values, actions }) => {\r\n            const opts = useMemo(() => values.products.map((p) => ({ label: p.name, value: p.no })), [values.products]);\r\n\r\n            return <Container>\r\n                <Button onClick={() => actions.resetAllValues()}>Reset</Button>\r\n\r\n                <FormField label=\"Product no\">\r\n                    <SelectBinder\r\n                        value={values.productNo}\r\n                        options={opts}\r\n                        onChanged={(v) => actions.setValue('productNo', v)}/>\r\n                </FormField>\r\n\r\n                <FormField label=\"Product Description\">\r\n                    <TextBinder\r\n                        value={values.productDescription}\r\n                        onChanged={(v: string) => actions.setValue('productDescription', v)}/>\r\n                </FormField>\r\n\r\n                <GridReactive\r\n                    gridId=\"grid-1\"\r\n                    data={values.data}\r\n                    opts={{\r\n                        columns: salesOrderColumns\r\n                    }}\r\n                    extensions={{\r\n                        selection: true\r\n                    }}\r\n                    onSelectionChanged={(id: string) => actions.setValue('selectedId', id)}/>\r\n\r\n                <FormField label=\"Selected Id\">\r\n                    <TextBinder\r\n                        value={values.selectedId}\r\n                        onChanged={(v: string) => actions.setValue('selectedId', v)}/>\r\n                </FormField>\r\n\r\n                <FormField label=\"Total\">\r\n                    <TextBinder\r\n                        value={'' + values.totalQuantity}/>\r\n                </FormField>\r\n\r\n                <GridReactive\r\n                    gridId=\"grid-2\"\r\n                    data={values.data2}\r\n                    onValueChanged={(id, key, value) => dispatch(setChangedQuantity(id, parseFloat(value)))}\r\n                    opts={{\r\n                        columns: forecastColumns\r\n                    }}\r\n                    extensions={{\r\n                        editing: true\r\n                    }}/>\r\n            </Container>\r\n        }}\r\n    </FormModel>\r\n}\r\n\r\nexport default connect()(SuperForm);\r\n","import { Record, Map, List } from 'immutable';\r\nimport { Action } from 'redux';\r\nimport { FormsState, FormState, RecordFactory as RecFactory } from './types';\r\nimport { ActionType, SetFormValueAction, ResetFormValuesAction, ResetAllFormValuesAction } from './actions';\r\n\r\nexport const createState: RecFactory<FormsState> = Record({\r\n    forms: Map<string, FormState>()\r\n});\r\n\r\nconst createForm: RecFactory<FormState> = Record({\r\n    values: Map<string, any>()\r\n});\r\n\r\nexport default function(state: FormsState = createState(), action: Action) {\r\n    switch (action.type) {\r\n        case ActionType.SET_FORM_VALUE:\r\n            return handleSetFormValue(state, action as SetFormValueAction);\r\n        case ActionType.RESET_ALL_FORM_VALUES:\r\n            return handlerResetAllFormValues(state, action as ResetAllFormValuesAction);\r\n        case ActionType.RESET_FORM_VALUES:\r\n            return handleResetFormValeus(state, action as ResetFormValuesAction);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction handleSetFormValue(state: FormsState, { formId, key, value }: SetFormValueAction) {\r\n    return updateForm(state, formId, (form) => form.update('values', (values) => values.set(key, value)));\r\n}\r\n\r\nfunction handlerResetAllFormValues(state: FormsState, { formId }: ResetAllFormValuesAction) {\r\n    return updateForm(state, formId, (form) => form.delete('values'));\r\n}\r\n\r\nfunction handleResetFormValeus(state: FormsState, { formId, keys }: ResetFormValuesAction) {\r\n    return updateForm(state, formId, (form) => form.update('values', (values) => values.withMutations((vs) => {\r\n        for(let key of keys) {\r\n            vs.delete(key);\r\n        }\r\n    })))\r\n}\r\n\r\nfunction updateForm(state: FormsState, formId: string, fn: (form: FormState) => FormState) {\r\n    return state.update('forms', (forms) => forms.update(formId, (form = createForm()) => fn(form)));\r\n}\r\n","import { DataState } from \"./types\";\r\nimport { Map } from \"immutable\";\r\n\r\nexport const data: DataState = {\r\n    products: [\r\n        { name: 'Product A', no: '1', description: 'product A description' },\r\n        { name: 'Product B', no: '2', description: 'product B description' },\r\n        { name: 'Product C', no: '3', description: 'product C description' }\r\n    ],\r\n    salesOrders: {\r\n        '1': [\r\n            { id: 'a', date: '01/01-2019', quantity: 1, remark: 'product A - order 1' },\r\n            { id: 'b', date: '02/01-2019', quantity: 2, remark: 'product A - order 2' },\r\n            { id: 'c', date: '03/01-2019', quantity: 2, remark: 'product A - order 3' }\r\n        ],\r\n        '2': [\r\n            { id: 'd', date: '01/01-2019', quantity: 1, remark: 'product B - order 4' },\r\n            { id: 'e', date: '02/01-2019', quantity: 2, remark: 'product B - order 5' },\r\n            { id: 'f', date: '03/01-2019', quantity: 4, remark: 'product B - order 6' },\r\n            { id: 'g', date: '04/01-2019', quantity: 8, remark: 'product B - order 7' }\r\n        ],\r\n        '3': [\r\n            { id: 'h', date: '01/01-2019', quantity: 1, remark: 'product C - order 8' }\r\n        ]\r\n    },\r\n    forecasts: {\r\n        'a': [\r\n            { id: 'a1', quantity : 1 },\r\n            { id: 'a2', quantity : 2 }\r\n        ],\r\n        'b': [\r\n            { id: 'b1', quantity : 3 },\r\n            { id: 'b2', quantity : 4 }\r\n        ],\r\n        'c': [\r\n            { id: 'c1', quantity : 5 },\r\n            { id: 'c2', quantity : 6 },\r\n            { id: 'c3', quantity : 7 },\r\n            { id: 'c4', quantity : 8 }\r\n        ],\r\n        'd': [\r\n            { id: 'd1', quantity : 9 },\r\n            { id: 'd2', quantity : 10 }\r\n        ],\r\n        'e': [\r\n            { id: 'd1', quantity : 11 }\r\n        ],\r\n        'f': [\r\n            { id: 'f1', quantity : 12 },\r\n            { id: 'f2', quantity : 13 }\r\n        ],\r\n        'g': [\r\n            { id: 'g1', quantity : 14 },\r\n            { id: 'g2', quantity : 15 },\r\n            { id: 'g3', quantity : 16 },\r\n            { id: 'g4', quantity : 17 }\r\n        ],\r\n        'h': [\r\n            { id: 'h1', quantity : 18 },\r\n            { id: 'h2', quantity : 19 }\r\n        ]\r\n    },\r\n    changedQuantities: Map()\r\n}\r\n","import { createStore, combineReducers } from 'redux';\r\nimport formReducers from './selector-master/reducers';\r\nimport dataReducers from './dataReducers';\r\n\r\nexport const store = createStore(combineReducers({\r\n        form: formReducers,\r\n        data: dataReducers\r\n    }),\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import { DataState } from \"./types\";\r\nimport { data } from './data';\r\nimport { Action } from \"redux\";\r\nimport { SetChangedQuantityAction, ActionType } from \"./dataActions\";\r\n\r\nexport default function(state: DataState = data, action: Action) {\r\n    switch (action.type) {\r\n        case ActionType.SET_CHANGED_QUANTITY:\r\n            return handleSetChangedQuantity(state, action as SetChangedQuantityAction);\r\n    }\r\n    \r\n    return state;\r\n}\r\n\r\nfunction handleSetChangedQuantity(state: DataState, { id, quantity }: SetChangedQuantityAction): DataState {\r\n    const changedQuantities = state.changedQuantities.set(id, quantity);\r\n    return { ...state, changedQuantities };\r\n}\r\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\n\nimport '@pearlchain/powergrid/web/powergrid.css';\nimport 'bootstrap/scss/bootstrap.scss';\nimport './App.css';\n\nimport SuperForm from './SuperForm';\nimport { store } from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <SuperForm/>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport '@pearlchain/powergrid';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}