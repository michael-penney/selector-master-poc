{"version":3,"sources":["powergrid/Grid.tsx","selector-master/actions.ts","powergrid/Datasource.ts","powergrid/GridReactive.tsx","powergrid/extensions/extensions.ts","powergrid/helpers.ts","selector-master/providers.ts","selector-master/FormModel.ts","dataActions.ts","selector-master/binders/TextBinder.tsx","selector-master/binders/SelectBinder.tsx","selector-master/FormField.tsx","SuperForm.tsx","selector-master/reducers.ts","data.ts","store.ts","dataReducers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","ActionType","memo","props","elRef","useRef","useLayoutEffect","el","current","gridOpts","Object","assign","settingsId","rootId","opts","grid","$","PowerGrid","events","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","event","value","target","on","name","action","err","return","onGridMounted","react_default","a","createElement","id","style","className","ref","Datasource","data","classCallCheck","this","lookupById","handleValueChanged","computeLookupById","createClass","key","callback","oldData","trigger","length","start","end","slice","getRecordById","index","get","isReady","result","Map","i","n","set","GridReactive","gridId","extensions","onValueChanged","onSelectionChanged","initialStateRef","_getInitialState","initialState","extsContext","onRowSelected","pgExtensions","ctx","pgExts","selection","onrowselected","addSelectionExt","editing","createExtensions","dataSource","getInitialState","useEffect","updateData","allOpts","objectSpread","powergrid_Grid","dataToRows","idFn","columns","rows","_loop","item","row","map","column","_key","push","ProviderState","provider","seq","depValues","providerSource","formSource","state","values","formValues","dependencies","getDependencies","invokeProvider","resolveDependencyValues","has","formValue","source","Function","dependsOn","Array","depsChanged","dep","depValue","args","apply","concat","toConsumableArray","createProvidersSelector","providers","prevValues","prevState","keys","seen","Set","depKeys","_i","k","some","depKey","add","Error","getProviderKeysOrdered","latest","valuesChanged","providerState","resolveNextValue","InnerComponent","_ref","formModel","children","connect","_state","_ref2","formId","selectState","selectProvided","form","providedValues","setFormValue","type","SET_FORM_VALUE","resetAllFormValues","RESET_ALL_FORM_VALUES","propValues","valuesMerged","actions","useMemo","setValue","bind","resetAllValues","TextBinder","disabled","onChanged","Form","Control","onChange","e","SelectBinder","options","selectedIdx","findIndex","opt","as","label","FormField","Group","Label","salesOrderColumns","width","title","forecastColumns","editable","products","s","productNo","no","productDescription","product","find","x","description","salesOrders","f","selectedId","data2","changedQuantities","forecasts","changedQuantity","totalQuantity","reduce","acc","d","parseFloat","dispatch","FormModel","p","Container","Button","onClick","v","quantity","SET_CHANGED_QUANTITY","setChangedQuantity","createState","Record","forms","createForm","updateForm","fn","update","arguments","1","date","remark","2","3","b","c","g","h","store","createStore","combineReducers","handleSetFormValue","delete","handlerResetAllFormValues","RESET_FORM_VALUES","_ref3","withMutations","vs","handleResetFormValeus","handleSetChangedQuantity","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","src_SuperForm","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9d278f1.chunk.js","sourcesContent":["import React, { CSSProperties, useRef, useLayoutEffect } from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport { EventHandler, PowergridOpts } from './types';\r\n\r\nexport type Props = {\r\n    rootId: string,\r\n    className?: string,\r\n    style?: CSSProperties,\r\n    events?: EventHandler[],\r\n    onGridMounted?: (grid: any) => void,\r\n    opts: PowergridOpts\r\n}\r\n\r\nfunction propsAreEqual() {\r\n    // this component should never re-render\r\n    return true;\r\n}\r\n\r\nexport default React.memo(\r\n    function Grid(props: Props) {\r\n        const elRef = useRef<HTMLDivElement>(null);\r\n        useLayoutEffect(() => {\r\n            const el = elRef.current;\r\n            if (el == null) return;\r\n\r\n            // mount the Powergrid\r\n            const gridOpts = Object.assign({ settingsId: props.rootId }, props.opts);\r\n            const grid = ($(el) as any).PowerGrid(gridOpts);\r\n\r\n            // attach event listeners\r\n            const events = props.events;\r\n            if (events) {\r\n                for (let event of events) {\r\n                    grid.target.on(event.name, event.action);\r\n                }\r\n            }\r\n\r\n            // supply the newly created grid to the call-back\r\n            if (props.onGridMounted)\r\n                props.onGridMounted(grid);\r\n        }, []);\r\n\r\n        return <div id={props.rootId} style={props.style} className={props.className} ref={elRef}/>\r\n    },\r\n    propsAreEqual\r\n);\r\n\r\n","import { Action } from \"redux\";\r\n\r\nexport enum ActionType {\r\n    SET_FORM_VALUE = \"core.form.SET_FORM_VALUE\",\r\n    RESET_ALL_FORM_VALUES = \"core.form.RESET_ALL_FORM_VALUES\",\r\n    RESET_FORM_VALUES = \"core.form.RESET_FORM_VALUES\"\r\n}\r\n\r\nexport function setFormValue(formId: string, key: string, value: any): SetFormValueAction {\r\n    return {\r\n        type: ActionType.SET_FORM_VALUE,\r\n        formId,\r\n        key: key as string,\r\n        value\r\n    };\r\n}\r\n\r\nexport function resetAllFormValues(formId: string): ResetAllFormValuesAction {\r\n    return {\r\n        type: ActionType.RESET_ALL_FORM_VALUES,\r\n        formId\r\n    };\r\n}\r\n\r\nexport function resetFormValues(formId: string, keys: string[]): ResetFormValuesAction {\r\n    return {\r\n        type: ActionType.RESET_FORM_VALUES,\r\n        formId, keys\r\n    };\r\n}\r\n\r\nexport interface SetFormValueAction extends Action {\r\n    formId: string,\r\n    key: string,\r\n    value: any\r\n}\r\n\r\nexport interface ResetAllFormValuesAction extends Action {\r\n    formId: string\r\n}\r\n\r\nexport interface ResetFormValuesAction extends Action {\r\n    formId: string,\r\n    keys: string[]\r\n}\r\n","import $ from 'jquery';\r\nimport { Row, IDatasource } from './types';\r\n\r\nexport type DataChangedFn = (id: string, key: number, value: any) => void;\r\n\r\nexport class Datasource implements IDatasource {\r\n    private data: Row[];\r\n    private lookupById: Map<string, number>;\r\n\r\n    private handleValueChanged: DataChangedFn|undefined;\r\n\r\n    constructor(data: Row[]) {\r\n        this.data = data;\r\n        this.lookupById = this.computeLookupById(data);\r\n    }\r\n\r\n    onValueChanged(callback: DataChangedFn|undefined): void {\r\n        this.handleValueChanged = callback;\r\n    }\r\n\r\n    updateData(data: Row[]) {\r\n        const oldData = this.data;\r\n        this.data = data;\r\n        this.lookupById = this.computeLookupById(data);\r\n\r\n        $(this).trigger('datachanged', {\r\n            data,\r\n            oldData\r\n        });\r\n    }\r\n\r\n    recordCount() {\r\n        return this.data.length;\r\n    }\r\n\r\n    getData(start: number, end: number): Row[] {\r\n        return this.data.slice(start, end);\r\n    }\r\n\r\n    setValue(id: string, key: number, value: any) {\r\n        const record = this.getRecordById(id);\r\n        record[key] = value;\r\n\r\n        this.handleValueChanged && this.handleValueChanged(id, key, value);\r\n    }\r\n\r\n    getRecordById(id: string): Row {\r\n        const index = this.lookupById.get(id)!;\r\n        return this.data[index];\r\n    }\r\n\r\n    isReady() {\r\n        return true;\r\n    }\r\n\r\n    assertReady() {\r\n        if(!this.isReady()) {\r\n            throw 'Datasource not ready yet';\r\n        }\r\n    }\r\n\r\n    private computeLookupById(data: Row[]) {\r\n        const result = new Map<string, number>();\r\n        for (let i = 0, n = data.length; i < n; ++i) {\r\n            result.set(data[i].id, i);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\n\r\nimport Grid from './Grid';\r\nimport { PowergridOpts, Row } from './types';\r\nimport { Datasource } from './Datasource';\r\nimport { createExtensions, ExtensionOpts, ExtsContext, OnSelectionChangedFn, PgExts } from './extensions/extensions';\r\n\r\n/**\r\n * Wrapper around the powergrid component.\r\n * Creates a datasource and initializes the extensions.\r\n */\r\n\r\ntype Opts = Pick<PowergridOpts, Exclude<keyof PowergridOpts, 'dataSource' | 'extensions' | 'data' | 'rootId'>>;\r\n\r\nexport type OnValueChangedFn = (id: string, key: number, value: string) => void;\r\n\r\ntype Props = {\r\n    gridId: string,\r\n    data: Row[],\r\n    extensions: ExtensionOpts,\r\n    opts: Opts,\r\n    onValueChanged?: OnValueChangedFn,\r\n    onSelectionChanged?: OnSelectionChangedFn\r\n}\r\n\r\ntype InitialState = {\r\n    extsContext: ExtsContext,\r\n    pgExtensions: PgExts,\r\n    dataSource: Datasource\r\n}\r\n\r\nexport default function GridReactive(props: Props) {\r\n    const { gridId, extensions, opts, data, onValueChanged, onSelectionChanged } = props;\r\n\r\n    // use useRef instead of useMemo, because we require a guarantee that the\r\n    // initial-state will never be re-created. UseMemo is an \"optimization\" and might not offer that guarantee in the future.\r\n    const initialStateRef = useRef<InitialState|null>(null);\r\n    function getInitialState(): InitialState {\r\n        let initialState = initialStateRef.current;\r\n        if (initialState != null) return initialState;\r\n\r\n        // create the extensions context object\r\n        const extsContext: ExtsContext = {\r\n            onRowSelected: onSelectionChanged\r\n        };\r\n\r\n        // create powergrid extensions\r\n        const pgExtensions = createExtensions(extensions, extsContext);\r\n\r\n        // create powergrid datasource\r\n        const dataSource = new Datasource(data);\r\n\r\n        // create the initial state\r\n        initialState = {\r\n            extsContext,\r\n            pgExtensions,\r\n            dataSource\r\n        };\r\n\r\n        initialStateRef.current = initialState;\r\n        return initialState;\r\n    }\r\n\r\n    const { dataSource, extsContext, pgExtensions } = getInitialState();\r\n    \r\n    // update the datasource when the data changed\r\n    useEffect(() => {\r\n        dataSource.updateData(data);\r\n    }, [data]);\r\n\r\n    // update the datasource onValueChanged callback\r\n    useEffect(() => {\r\n        dataSource.onValueChanged(onValueChanged);\r\n    }, [onValueChanged]);\r\n\r\n    // update the callbacks in the extensions context\r\n    useEffect(() => {\r\n        extsContext.onRowSelected = onSelectionChanged;\r\n    }, [onSelectionChanged]);\r\n\r\n    const rootId = gridId;\r\n    const allOpts: PowergridOpts = { ...opts, rootId, dataSource, extensions: pgExtensions };\r\n    return <Grid rootId={gridId} opts={allOpts}/>\r\n}\r\n","export type OnSelectionChangedFn = (id: string) => void;\r\n\r\nexport type PgExts = { [key: string]: any };\r\n\r\nexport interface ExtensionOpts {\r\n    selection?: boolean,\r\n    editing?: boolean\r\n}\r\n\r\nexport interface ExtsContext {\r\n    onRowSelected?: OnSelectionChangedFn\r\n}\r\n\r\nfunction addSelectionExt(result: PgExts, ctx: ExtsContext) {\r\n    result.selection = {\r\n        onrowselected: function(grid: any, id: string|number) {\r\n            ctx.onRowSelected && ctx.onRowSelected('' + id);\r\n        }\r\n    }\r\n}\r\n\r\nfunction addEditingExt(result: PgExts) {\r\n    result.editing = true;\r\n}\r\n\r\nexport function createExtensions(opts: ExtensionOpts, ctx: ExtsContext): PgExts {\r\n    const pgExts: PgExts = {};\r\n\r\n    if (opts.selection)\r\n        addSelectionExt(pgExts, ctx);\r\n\r\n    if (opts.editing)\r\n        addEditingExt(pgExts);\r\n\r\n    return pgExts;\r\n}\r\n","import { Column, Row } from \"./types\";\r\n\r\nexport function dataToRows<T>(data: Iterable<T>, idFn: (item: T, index: number) => string, columns: Column[]): Row[] {\r\n    const rows: Row[] = [];\r\n\r\n    let i = 0;\r\n    for (let item of data) {\r\n        const row: Row = columns.map((column) => (item as any)[column._key]) as any;\r\n        row.id = idFn(item, i++);\r\n        rows.push(row);\r\n    }\r\n\r\n    return rows;\r\n}\r\n\r\n\r\n","import * as Imm from 'immutable';\r\n\r\nexport type ProviderStateSelector<S, V> = (state: S, latest?: Imm.Map<string, any>) => V\r\n\r\ntype ProviderValueFn<S, T> = (state: S, ...args: any[]) => T;\r\ntype DependencyFn<S> = ((state: S) => any)|string;\r\n\r\ninterface ProviderConfig<S, T> {\r\n    value: T|ProviderValueFn<S, T>,\r\n    dependsOn?: DependencyFn<S>[]\r\n}\r\n\r\ntype Provider<S, T> = ProviderValueFn<S, T>|ProviderConfig<S, T>\r\n\r\nexport type Providers<S, V> = {\r\n    [K in keyof V]: Provider<S, V[K]>\r\n}\r\n\r\ninterface Source<T> {\r\n    value: T,\r\n    seq: number\r\n}\r\n\r\nclass ProviderState<S, T> {\r\n    private readonly key: string;\r\n    private readonly provider: Provider<S, T>;\r\n\r\n    private seq: number = 0;\r\n    private depValues: any[]|undefined;\r\n    private providerSource: Source<T>|undefined;\r\n    private formSource: Source<T>|undefined;\r\n\r\n    constructor(key: string, provider: Provider<S, T>) {\r\n        this.key = key;\r\n        this.provider = provider;\r\n    }\r\n\r\n    resolveNextValue(state: S, values: any, formValues: Imm.Map<string, any>|undefined) {\r\n        const dependencies = this.getDependencies();\r\n        if (dependencies == null) {\r\n            const value = this.invokeProvider(state);\r\n            if (!this.providerSource || this.providerSource.value !== value) {\r\n                this.providerSource = {\r\n                    value,\r\n                    seq: this.seq++\r\n                };\r\n            }\r\n\r\n        } else {\r\n            const depValues = this.resolveDependencyValues(state, dependencies, values);\r\n            if (!this.providerSource || depValues !== this.depValues) {\r\n                this.depValues = depValues;\r\n                const value = this.invokeProvider(state, depValues);\r\n                this.providerSource = {\r\n                    value,\r\n                    seq: this.seq++\r\n                };\r\n            }\r\n        }\r\n\r\n        if (formValues && formValues.has(this.key)) {\r\n            const formValue = formValues.get(this.key) as T;\r\n            const source = this.formSource;\r\n            if (!source || source.value !== formValue) {\r\n                this.formSource = {\r\n                    value: formValue,\r\n                    seq: this.seq++\r\n                };\r\n            }\r\n\r\n        } else {\r\n            this.formSource = undefined;\r\n        }\r\n\r\n        if (this.formSource && this.formSource.seq > this.providerSource.seq) {\r\n            return this.formSource.value;\r\n        } else {\r\n            return this.providerSource.value;\r\n        }\r\n    }\r\n\r\n    private getDependencies(): DependencyFn<S>[]|undefined {\r\n        const provider = this.provider;\r\n        if (!(provider instanceof Function)) {\r\n            return provider.dependsOn;\r\n        }\r\n    }\r\n\r\n    private resolveDependencyValues(state: S, dependencies: DependencyFn<S>[], values: any): any[] {\r\n        const depValues = new Array(dependencies.length);\r\n        \r\n        let depsChanged = false;\r\n        for (let i = 0, n = dependencies.length; i < n; ++i) {\r\n            const dep = dependencies[i];\r\n\r\n            let depValue: any;\r\n            if (typeof dep === 'string') {\r\n                depValue = values[dep];\r\n            } else {\r\n                depValue = dep(state);\r\n            }\r\n\r\n            if (!depsChanged && (this.depValues == null || this.depValues[i] !== depValue)) {\r\n                depsChanged = true;\r\n            }\r\n\r\n            depValues[i] = depValue;\r\n        }\r\n\r\n        if (this.depValues == null || depsChanged) {\r\n            return depValues;\r\n        } else {\r\n            return this.depValues;\r\n        }\r\n    }\r\n\r\n    private invokeProvider(state: S, args?: any[]): T {\r\n        const provider = this.provider;\r\n        if (provider instanceof Function) {\r\n            return args ? provider(state, ...args) : provider(state);\r\n\r\n        } else {\r\n            if (provider.value instanceof Function) {\r\n                return args ? provider.value(state, ...args) : provider.value(state);\r\n\r\n            } else {\r\n                return provider.value;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function createProvidersSelector<S, V>(providers: Providers<S, V>): ProviderStateSelector<S, V> {\r\n    const prevState = new Map<string, ProviderState<S, any>>();\r\n    let prevValues: V|undefined;\r\n    const keys = getProviderKeysOrdered(providers);\r\n    \r\n    return (state: S, latest?: Imm.Map<string, any>): V => {\r\n        const values: { [key: string]: any } = {};\r\n        let valuesChanged = false;\r\n\r\n        for (let key of keys) {\r\n            let providerState = prevState.get(key);\r\n\r\n            if (providerState == null) {\r\n                providerState = new ProviderState(key, providers[key as keyof V]);\r\n                prevState.set(key, providerState);\r\n            }\r\n\r\n            values[key] = providerState.resolveNextValue(state, values, latest);\r\n            if (prevValues == null || values[key] !== prevValues[key as keyof V]) {\r\n                valuesChanged = true;\r\n            }\r\n        }\r\n\r\n        if (valuesChanged) {\r\n            prevValues = values as V;\r\n            return values as V;\r\n\r\n        } else {\r\n            if (prevValues == null)\r\n                prevValues = values as V;\r\n\r\n            // return the previous value if nothing changed.\r\n            // Makes the result of this function memoizable\r\n            return prevValues;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the keys of the providers, ordered by dependencies\r\n * @param providers \r\n */\r\nfunction getProviderKeysOrdered<S, V>(providers: Providers<S, V>) {\r\n    let keys = Object.keys(providers);\r\n    const result: string[] = [];\r\n    const seen = new Set<string>();\r\n\r\n    while (keys.length) {\r\n        let depKeys: string[]|undefined;\r\n        \r\n        for (let k of keys) {\r\n            const provider: Provider<S, any> = providers[k as keyof V];\r\n\r\n            if (typeof provider === 'object'\r\n                && provider.dependsOn\r\n                && provider.dependsOn.some((depKey) => typeof depKey === 'string' && !seen.has(depKey))) {\r\n\r\n                if (!depKeys)\r\n                    depKeys = [];\r\n\r\n                // provider has unresolved dependencies. Delay until later\r\n                depKeys.push(k);\r\n                continue;\r\n            }\r\n\r\n            result.push(k);\r\n            seen.add(k);\r\n        }\r\n\r\n        if (depKeys) {\r\n            if (depKeys.length === keys.length) {\r\n                throw new Error('cyclic dependency! Couldn\\'t resolve keys: - ' + depKeys);\r\n            } else {\r\n                keys = depKeys;\r\n            }\r\n\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","import React, { ReactElement, useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { FormModel, FormActions, FormsState } from './types';\r\nimport { setFormValue, resetAllFormValues } from './actions';\r\nimport { createProvidersSelector, Providers } from './providers';\r\n\r\ntype RenderChildrenFn<V> = (formModel: FormModel<V>) => ReactElement;\r\n\r\ntype OwnProps<TProvided = {}, TValues = {}, TState = any> = {\r\n    formId: string,\r\n    selectState: (s: TState) => FormsState,\r\n    providers?: Providers<TState, TProvided>,\r\n    values?: TValues,\r\n    children: RenderChildrenFn<TProvided & TValues>\r\n};\r\n\r\ntype DispatchProps = {\r\n    setFormValue: typeof setFormValue,\r\n    resetAllFormValues: typeof resetAllFormValues\r\n};\r\n\r\ntype StateProps<TProvided> = {\r\n    providedValues: TProvided|undefined\r\n};\r\n\r\ntype InnerProps = {\r\n    formModel: FormModel<any>,\r\n    children: RenderChildrenFn<any>\r\n}\r\n\r\n// Memoized inner component. Only call render when the props changed\r\nconst InnerComponent = React.memo(function FormModelInner({ formModel, children }: InnerProps) {\r\n    return children(formModel);\r\n});\r\n\r\nfunction FormModelComponent<TProvided, TValues, TState>(props: StateProps<TProvided> & DispatchProps & OwnProps<TProvided, TValues, TState>) {\r\n    const { formId, values: propValues, providedValues, children,\r\n        setFormValue, resetAllFormValues } = props;\r\n        \r\n    type V = TProvided & TValues;\r\n\r\n    // merge the provided values with values passed in the props\r\n    const valuesMerged = Object.assign({}, propValues, providedValues);\r\n\r\n    // build the form-actions object\r\n    const actions = useMemo<FormActions<V>>(() => ({\r\n        setValue: setFormValue.bind(null, formId) as any,\r\n        resetAllValues: resetAllFormValues.bind(null, formId)\r\n    }), [formId, valuesMerged, setFormValue, resetAllFormValues]);\r\n\r\n    // build the form-model\r\n    const formModel = useMemo<FormModel<V>>(() => ({\r\n        formId,\r\n        values: valuesMerged,\r\n        actions\r\n    }), [formId, valuesMerged, actions]);\r\n\r\n    return React.createElement(InnerComponent, { children, formModel });\r\n}\r\n\r\nexport default connect(\r\n    <TProvided, TValues, TState>(_state: TState, { providers, formId, selectState }: OwnProps<TProvided, TValues, TState>) => {\r\n        const selectProvided = providers && createProvidersSelector(providers);\r\n\r\n        return (state: TState): StateProps<TProvided> => {\r\n            const formsState = selectState(state);\r\n            const form = formsState.get('forms').get(formId);\r\n            const formValues = form && form.get('values');\r\n            return {\r\n                providedValues: selectProvided && selectProvided(state, formValues)\r\n            }\r\n        }\r\n    },\r\n    { setFormValue, resetAllFormValues }\r\n)(FormModelComponent) as any as <TProvided, TValues, TState>(props: OwnProps<TProvided, TValues, TState>) => React.ReactElement;\r\n","import { Action } from \"redux\";\r\n\r\nexport enum ActionType {\r\n    SET_CHANGED_QUANTITY = 'example.SET_CHANGED_QUANTITY'\r\n}\r\n\r\nexport function setChangedQuantity(id: string, quantity: number): SetChangedQuantityAction {\r\n    return {\r\n        type: ActionType.SET_CHANGED_QUANTITY, id, quantity\r\n    };\r\n}\r\n\r\nexport interface SetChangedQuantityAction extends Action<ActionType> {\r\n    id: string,\r\n    quantity: number\r\n};\r\n","import React from 'react';\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport { BinderProps } from \"../types\";\r\n\r\nexport default function TextBinder(props: BinderProps<string>) {\r\n    const disabled = !props.onChanged;\r\n\r\n    function handleChanged(e: any) {\r\n        if (props.onChanged)\r\n            props.onChanged(e.target.value);\r\n    }\r\n\r\n    return <Form.Control \r\n        type=\"text\"\r\n        value={props.value}\r\n        disabled={disabled}\r\n        onChange={handleChanged}/>\r\n}\r\n","import React from 'react';\r\nimport { Form } from \"react-bootstrap\";\r\nimport { BinderProps } from '../types';\r\n\r\nexport interface Option<T> {\r\n    label: string, value: T\r\n}\r\n\r\nexport interface SelectBinderProps<T> extends BinderProps<T> {\r\n    options: Option<T>[]\r\n};\r\n\r\nexport default function SelectBinder<T>(props: SelectBinderProps<T>) {\r\n    const options = props.options;\r\n    const selectedIdx = options.findIndex((opt) => opt.value === props.value);\r\n    const disabled = !props.onChanged;\r\n\r\n    function handleChanged(e: any) {\r\n        if (props.onChanged)\r\n            props.onChanged(options[e.target.value].value);\r\n    }\r\n\r\n    return <Form.Control as=\"select\"\r\n        value={'' + selectedIdx}\r\n        disabled={disabled}\r\n        onChange={handleChanged}>\r\n        { options.map((opt, index) => <option key={index} value={'' + index}>{ opt.label }</option>) }\r\n    </Form.Control>\r\n}\r\n","import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\ninterface Props {\r\n    label: string\r\n    children: React.ReactElement\r\n};\r\n\r\nexport default function FormField({ label, children }: Props) {\r\n    return <Form.Group>\r\n        <Form.Label>\r\n            { label }\r\n        </Form.Label>\r\n        { children }\r\n    </Form.Group>\r\n}\r\n\r\n","import React, { useMemo } from 'react';\r\nimport { Map } from 'immutable';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Button } from 'react-bootstrap';\r\n\r\nimport { StoreState as S, Product } from './types';\r\n\r\nimport { Column, Row } from './powergrid/types';\r\nimport GridReactive from './powergrid/GridReactive';\r\nimport { dataToRows } from './powergrid/helpers';\r\n\r\nimport FormModel from './selector-master/FormModel';\r\nimport TextBinder from './selector-master/binders/TextBinder';\r\nimport { Providers } from './selector-master/providers';\r\nimport SelectBinder from './selector-master/binders/SelectBinder';\r\nimport FormField from './selector-master/FormField';\r\n\r\nimport { setChangedQuantity } from './dataActions';\r\n\r\ninterface Values {\r\n    products: Product[],\r\n    productNo: string,\r\n    productDescription: string,\r\n    data: Row[],\r\n    data2: Row[]\r\n    selectedId: string,\r\n    totalQuantity: number\r\n}\r\n\r\nconst salesOrderColumns: Column[] = [\r\n    { _key: 'id', width: 160, title: 'Id' },\r\n    { _key: 'quantity', width: 150, title: 'Quantity' },\r\n    { _key: 'date', width: 150, title: 'Date' },\r\n    { _key: 'remark', width: 150, title: 'Remark' }\r\n]\r\n\r\nconst forecastColumns: Column[] = [\r\n    { _key: 'id', width: 160, title: 'Id' },\r\n    { _key: 'quantity', width: 150, title: 'Quantity', editable: true }\r\n]\r\n\r\nconst providers: Providers<S, Values> = {\r\n    products: (s: S) => s.data.products,\r\n    productNo: {\r\n        value: (s: S, products: Product[]) => products[0].no,\r\n        dependsOn: ['products']\r\n    },\r\n    productDescription: {\r\n        value: (s: S, productNo: string, products: Product[]) => {\r\n            const product = products.find((x) => x.no === productNo);\r\n            return product ? product.description : '';\r\n        },\r\n        dependsOn: ['productNo', 'products']\r\n    },\r\n    data: {\r\n        value: (s: S, productNo: string) => dataToRows(s.data.salesOrders[productNo], (f) => f.id, salesOrderColumns),\r\n        dependsOn: ['productNo']\r\n    },\r\n    selectedId: {\r\n        value: () => '',\r\n        dependsOn: ['data']\r\n    },\r\n    data2: {\r\n        value: (s: S, selectedId: string, changedQuantities: Map<string, number>) => {\r\n            const rows =  selectedId && s.data.forecasts[selectedId] ? dataToRows(s.data.forecasts[selectedId], (f) => f.id, forecastColumns) : [];\r\n\r\n            // merge rows with changed quantities.\r\n            // Maybe we want to build this into the grid component somehow - But for now it's a manual step.\r\n            for (let row of rows) {\r\n                const changedQuantity = changedQuantities.get(row[0]);\r\n                if (changedQuantity != null)\r\n                    row[1] = changedQuantity;\r\n            }\r\n\r\n            return rows;\r\n        },\r\n        dependsOn: ['selectedId', (s: S) => s.data.changedQuantities]\r\n    },\r\n    totalQuantity: {\r\n        value: (s: S, data: Row[]) => data.reduce((acc, d) => acc + parseFloat(d[1]), 0),\r\n        dependsOn: ['data2']\r\n    }\r\n}\r\n\r\ntype FormProps = {\r\n    dispatch: Dispatch\r\n}\r\n\r\nfunction SuperForm({ dispatch }: FormProps) {\r\n    return <FormModel\r\n        formId=\"form-1\"\r\n        providers={providers}\r\n        selectState={(s: S) => s.form}>\r\n        {({ values, actions }) => {\r\n            const opts = useMemo(() => values.products.map((p) => ({ label: p.name, value: p.no })), [values.products]);\r\n\r\n            return <Container>\r\n                <Button onClick={() => actions.resetAllValues()}>Reset</Button>\r\n\r\n                <FormField label=\"Product no\">\r\n                    <SelectBinder\r\n                        value={values.productNo}\r\n                        options={opts}\r\n                        onChanged={(v) => actions.setValue('productNo', v)}/>\r\n                </FormField>\r\n\r\n                <FormField label=\"Product Description\">\r\n                    <TextBinder\r\n                        value={values.productDescription}\r\n                        onChanged={(v: string) => actions.setValue('productDescription', v)}/>\r\n                </FormField>\r\n\r\n                <GridReactive\r\n                    gridId=\"grid-1\"\r\n                    data={values.data}\r\n                    opts={{\r\n                        columns: salesOrderColumns\r\n                    }}\r\n                    extensions={{\r\n                        selection: true\r\n                    }}\r\n                    onSelectionChanged={(id: string) => actions.setValue('selectedId', id)}/>\r\n\r\n                <FormField label=\"Selected Id\">\r\n                    <TextBinder\r\n                        value={values.selectedId}\r\n                        onChanged={(v: string) => actions.setValue('selectedId', v)}/>\r\n                </FormField>\r\n\r\n                <FormField label=\"Total\">\r\n                    <TextBinder\r\n                        value={'' + values.totalQuantity}/>\r\n                </FormField>\r\n\r\n                <GridReactive\r\n                    gridId=\"grid-2\"\r\n                    data={values.data2}\r\n                    onValueChanged={(id, key, value) => dispatch(setChangedQuantity(id, parseFloat(value)))}\r\n                    opts={{\r\n                        columns: forecastColumns\r\n                    }}\r\n                    extensions={{\r\n                        editing: true\r\n                    }}/>\r\n            </Container>\r\n        }}\r\n    </FormModel>\r\n}\r\n\r\nexport default connect()(SuperForm);\r\n","import { Record, Map, List } from 'immutable';\r\nimport { Action } from 'redux';\r\nimport { FormsState, FormState, RecordFactory as RecFactory } from './types';\r\nimport { ActionType, SetFormValueAction, ResetFormValuesAction, ResetAllFormValuesAction } from './actions';\r\n\r\nexport const createState: RecFactory<FormsState> = Record({\r\n    forms: Map<string, FormState>()\r\n});\r\n\r\nconst createForm: RecFactory<FormState> = Record({\r\n    values: Map<string, any>()\r\n});\r\n\r\nexport default function(state: FormsState = createState(), action: Action) {\r\n    switch (action.type) {\r\n        case ActionType.SET_FORM_VALUE:\r\n            return handleSetFormValue(state, action as SetFormValueAction);\r\n        case ActionType.RESET_ALL_FORM_VALUES:\r\n            return handlerResetAllFormValues(state, action as ResetAllFormValuesAction);\r\n        case ActionType.RESET_FORM_VALUES:\r\n            return handleResetFormValeus(state, action as ResetFormValuesAction);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction handleSetFormValue(state: FormsState, { formId, key, value }: SetFormValueAction) {\r\n    return updateForm(state, formId, (form) => form.update('values', (values) => values.set(key, value)));\r\n}\r\n\r\nfunction handlerResetAllFormValues(state: FormsState, { formId }: ResetAllFormValuesAction) {\r\n    return updateForm(state, formId, (form) => form.delete('values'));\r\n}\r\n\r\nfunction handleResetFormValeus(state: FormsState, { formId, keys }: ResetFormValuesAction) {\r\n    return updateForm(state, formId, (form) => form.update('values', (values) => values.withMutations((vs) => {\r\n        for(let key of keys) {\r\n            vs.delete(key);\r\n        }\r\n    })))\r\n}\r\n\r\nfunction updateForm(state: FormsState, formId: string, fn: (form: FormState) => FormState) {\r\n    return state.update('forms', (forms) => forms.update(formId, (form = createForm()) => fn(form)));\r\n}\r\n","import { DataState } from \"./types\";\r\nimport { Map } from \"immutable\";\r\n\r\nexport const data: DataState = {\r\n    products: [\r\n        { name: 'Product A', no: '1', description: 'product A description' },\r\n        { name: 'Product B', no: '2', description: 'product B description' },\r\n        { name: 'Product C', no: '3', description: 'product C description' }\r\n    ],\r\n    salesOrders: {\r\n        '1': [\r\n            { id: 'a', date: '01/01-2019', quantity: 1, remark: 'product A - order 1' },\r\n            { id: 'b', date: '02/01-2019', quantity: 2, remark: 'product A - order 2' },\r\n            { id: 'c', date: '03/01-2019', quantity: 2, remark: 'product A - order 3' }\r\n        ],\r\n        '2': [\r\n            { id: 'd', date: '01/01-2019', quantity: 1, remark: 'product B - order 4' },\r\n            { id: 'e', date: '02/01-2019', quantity: 2, remark: 'product B - order 5' },\r\n            { id: 'f', date: '03/01-2019', quantity: 4, remark: 'product B - order 6' },\r\n            { id: 'g', date: '04/01-2019', quantity: 8, remark: 'product B - order 7' }\r\n        ],\r\n        '3': [\r\n            { id: 'h', date: '01/01-2019', quantity: 1, remark: 'product C - order 8' }\r\n        ]\r\n    },\r\n    forecasts: {\r\n        'a': [\r\n            { id: 'a1', quantity : 1 },\r\n            { id: 'a2', quantity : 2 }\r\n        ],\r\n        'b': [\r\n            { id: 'b1', quantity : 3 },\r\n            { id: 'b2', quantity : 4 }\r\n        ],\r\n        'c': [\r\n            { id: 'c1', quantity : 5 },\r\n            { id: 'c2', quantity : 6 },\r\n            { id: 'c3', quantity : 7 },\r\n            { id: 'c4', quantity : 8 }\r\n        ],\r\n        'd': [\r\n            { id: 'd1', quantity : 9 },\r\n            { id: 'd2', quantity : 10 }\r\n        ],\r\n        'e': [\r\n            { id: 'd1', quantity : 11 }\r\n        ],\r\n        'f': [\r\n            { id: 'f1', quantity : 12 },\r\n            { id: 'f2', quantity : 13 }\r\n        ],\r\n        'g': [\r\n            { id: 'g1', quantity : 14 },\r\n            { id: 'g2', quantity : 15 },\r\n            { id: 'g3', quantity : 16 },\r\n            { id: 'g4', quantity : 17 }\r\n        ],\r\n        'h': [\r\n            { id: 'h1', quantity : 18 },\r\n            { id: 'h2', quantity : 19 }\r\n        ]\r\n    },\r\n    changedQuantities: Map()\r\n}\r\n","import { createStore, combineReducers } from 'redux';\r\nimport formReducers from './selector-master/reducers';\r\nimport dataReducers from './dataReducers';\r\n\r\nexport const store = createStore(combineReducers({\r\n        form: formReducers,\r\n        data: dataReducers\r\n    }),\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n","import { DataState } from \"./types\";\r\nimport { data } from './data';\r\nimport { Action } from \"redux\";\r\nimport { SetChangedQuantityAction, ActionType } from \"./dataActions\";\r\n\r\nexport default function(state: DataState = data, action: Action) {\r\n    switch (action.type) {\r\n        case ActionType.SET_CHANGED_QUANTITY:\r\n            return handleSetChangedQuantity(state, action as SetChangedQuantityAction);\r\n    }\r\n    \r\n    return state;\r\n}\r\n\r\nfunction handleSetChangedQuantity(state: DataState, { id, quantity }: SetChangedQuantityAction): DataState {\r\n    const changedQuantities = state.changedQuantities.set(id, quantity);\r\n    return { ...state, changedQuantities };\r\n}\r\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\n\nimport '@pearlchain/powergrid/web/powergrid.css';\nimport 'bootstrap/scss/bootstrap.scss';\nimport './App.css';\n\nimport SuperForm from './SuperForm';\nimport { store } from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <SuperForm/>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport '@pearlchain/powergrid';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}